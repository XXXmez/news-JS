(()=>{"use strict";var n={669:(n,e,t)=>{t.d(e,{Z:()=>s});var r=t(15),o=t.n(r),i=t(645),A=t.n(i)()(o());A.push([n.id,".news__item {\n    display: flex;\n    flex-direction: column;\n    margin: 1rem auto;\n    margin-bottom: 1.6%;\n    background: #fff;\n    color: #333;\n    line-height: 1.4;\n    font-family: Arial, sans-serif;\n    border-radius: 5px;\n    overflow: hidden;\n}\n\n.news__item:hover .news__meta-photo {\n    transform: scale(1.3) rotate(3deg);\n}\n\n.news__item .news__meta {\n    position: relative;\n    height: 200px;\n}\n\n.news__item .news__meta-photo {\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    background-size: cover;\n    background-position: center;\n    transition: transform 0.2s;\n}\n\n.news__item .news__meta-details,\n.news__item .news__meta-details ul {\n    margin: auto;\n    padding: 0;\n    list-style: none;\n}\n\n.news__item .news__meta-details {\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: -120%;\n    margin: auto;\n    transition: left 0.2s;\n    background: rgba(0, 0, 0, 0.6);\n    color: #fff;\n    padding: 10px;\n    width: 100%;\n    font-size: 0.9rem;\n}\n\n.news__item .news__description {\n    padding: 1rem;\n    background: #fff;\n    position: relative;\n    z-index: 1;\n}\n\n.news__item .news__description h2 {\n    line-height: 1;\n    margin: 0;\n    font-size: 1.7rem;\n}\n\n.news__item .news__description h3 {\n    font-size: 1rem;\n    font-weight: 300;\n    text-transform: uppercase;\n    color: #a2a2a2;\n    margin-top: 5px;\n}\n\n.news__item .news__description .news__read-more {\n    text-align: right;\n}\n\n.news__item .news__description .news__read-more a {\n    color: #5ad67d;\n    display: inline-block;\n    position: relative;\n    text-decoration: none;\n    font-weight: 800;\n}\n\n.news__item .news__description .news__read-more a:after {\n    content: '→';\n    margin-left: -10px;\n    opacity: 0;\n    vertical-align: middle;\n    transition: margin 0.3s, opacity 0.3s;\n}\n\n.news__item .news__description .news__read-more a:hover:after {\n    margin-left: 5px;\n    opacity: 1;\n}\n\n.news__item p {\n    margin: 1rem 0 0;\n}\n\n.news__item p:first-of-type {\n    margin-top: 1.25rem;\n    position: relative;\n}\n\n.news__item p:first-of-type:before {\n    content: '';\n    position: absolute;\n    height: 5px;\n    background: #5ad67d;\n    width: 35px;\n    top: -0.75rem;\n    border-radius: 3px;\n}\n\n.news__item:hover .news__meta-details {\n    left: 0%;\n}\n\n@media (min-width: 640px) {\n    .news__item {\n        flex-direction: row;\n        max-width: 700px;\n    }\n\n    .news__item .news__meta {\n        flex-basis: 40%;\n        height: auto;\n    }\n\n    .news__item .news__description {\n        flex-basis: 60%;\n    }\n\n    .news__item .news__description:before {\n        -webkit-transform: skewX(-3deg);\n        transform: skewX(-3deg);\n        content: '';\n        background: #fff;\n        width: 30px;\n        position: absolute;\n        left: -10px;\n        top: 0;\n        bottom: 0;\n        z-index: -1;\n    }\n\n    .news__item.alt {\n        flex-direction: row-reverse;\n    }\n\n    .news__item.alt .news__description:before {\n        left: inherit;\n        right: -10px;\n        -webkit-transform: skew(3deg);\n        transform: skew(3deg);\n    }\n\n    .news__item.alt .news__meta-details {\n        padding-left: 25px;\n    }\n}\n","",{version:3,sources:["webpack://./src/components/view/news/news.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,sBAAsB;IACtB,iBAAiB;IACjB,mBAAmB;IACnB,gBAAgB;IAChB,WAAW;IACX,gBAAgB;IAChB,8BAA8B;IAC9B,kBAAkB;IAClB,gBAAgB;AACpB;;AAEA;IACI,kCAAkC;AACtC;;AAEA;IACI,kBAAkB;IAClB,aAAa;AACjB;;AAEA;IACI,kBAAkB;IAClB,MAAM;IACN,QAAQ;IACR,SAAS;IACT,OAAO;IACP,sBAAsB;IACtB,2BAA2B;IAC3B,0BAA0B;AAC9B;;AAEA;;IAEI,YAAY;IACZ,UAAU;IACV,gBAAgB;AACpB;;AAEA;IACI,kBAAkB;IAClB,MAAM;IACN,SAAS;IACT,WAAW;IACX,YAAY;IACZ,qBAAqB;IACrB,8BAA8B;IAC9B,WAAW;IACX,aAAa;IACb,WAAW;IACX,iBAAiB;AACrB;;AAEA;IACI,aAAa;IACb,gBAAgB;IAChB,kBAAkB;IAClB,UAAU;AACd;;AAEA;IACI,cAAc;IACd,SAAS;IACT,iBAAiB;AACrB;;AAEA;IACI,eAAe;IACf,gBAAgB;IAChB,yBAAyB;IACzB,cAAc;IACd,eAAe;AACnB;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,cAAc;IACd,qBAAqB;IACrB,kBAAkB;IAClB,qBAAqB;IACrB,gBAAgB;AACpB;;AAEA;IACI,YAAY;IACZ,kBAAkB;IAClB,UAAU;IACV,sBAAsB;IACtB,qCAAqC;AACzC;;AAEA;IACI,gBAAgB;IAChB,UAAU;AACd;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,mBAAmB;IACnB,kBAAkB;AACtB;;AAEA;IACI,WAAW;IACX,kBAAkB;IAClB,WAAW;IACX,mBAAmB;IACnB,WAAW;IACX,aAAa;IACb,kBAAkB;AACtB;;AAEA;IACI,QAAQ;AACZ;;AAEA;IACI;QACI,mBAAmB;QACnB,gBAAgB;IACpB;;IAEA;QACI,eAAe;QACf,YAAY;IAChB;;IAEA;QACI,eAAe;IACnB;;IAEA;QACI,+BAA+B;QAC/B,uBAAuB;QACvB,WAAW;QACX,gBAAgB;QAChB,WAAW;QACX,kBAAkB;QAClB,WAAW;QACX,MAAM;QACN,SAAS;QACT,WAAW;IACf;;IAEA;QACI,2BAA2B;IAC/B;;IAEA;QACI,aAAa;QACb,YAAY;QACZ,6BAA6B;QAC7B,qBAAqB;IACzB;;IAEA;QACI,kBAAkB;IACtB;AACJ",sourcesContent:[".news__item {\n    display: flex;\n    flex-direction: column;\n    margin: 1rem auto;\n    margin-bottom: 1.6%;\n    background: #fff;\n    color: #333;\n    line-height: 1.4;\n    font-family: Arial, sans-serif;\n    border-radius: 5px;\n    overflow: hidden;\n}\n\n.news__item:hover .news__meta-photo {\n    transform: scale(1.3) rotate(3deg);\n}\n\n.news__item .news__meta {\n    position: relative;\n    height: 200px;\n}\n\n.news__item .news__meta-photo {\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    background-size: cover;\n    background-position: center;\n    transition: transform 0.2s;\n}\n\n.news__item .news__meta-details,\n.news__item .news__meta-details ul {\n    margin: auto;\n    padding: 0;\n    list-style: none;\n}\n\n.news__item .news__meta-details {\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: -120%;\n    margin: auto;\n    transition: left 0.2s;\n    background: rgba(0, 0, 0, 0.6);\n    color: #fff;\n    padding: 10px;\n    width: 100%;\n    font-size: 0.9rem;\n}\n\n.news__item .news__description {\n    padding: 1rem;\n    background: #fff;\n    position: relative;\n    z-index: 1;\n}\n\n.news__item .news__description h2 {\n    line-height: 1;\n    margin: 0;\n    font-size: 1.7rem;\n}\n\n.news__item .news__description h3 {\n    font-size: 1rem;\n    font-weight: 300;\n    text-transform: uppercase;\n    color: #a2a2a2;\n    margin-top: 5px;\n}\n\n.news__item .news__description .news__read-more {\n    text-align: right;\n}\n\n.news__item .news__description .news__read-more a {\n    color: #5ad67d;\n    display: inline-block;\n    position: relative;\n    text-decoration: none;\n    font-weight: 800;\n}\n\n.news__item .news__description .news__read-more a:after {\n    content: '→';\n    margin-left: -10px;\n    opacity: 0;\n    vertical-align: middle;\n    transition: margin 0.3s, opacity 0.3s;\n}\n\n.news__item .news__description .news__read-more a:hover:after {\n    margin-left: 5px;\n    opacity: 1;\n}\n\n.news__item p {\n    margin: 1rem 0 0;\n}\n\n.news__item p:first-of-type {\n    margin-top: 1.25rem;\n    position: relative;\n}\n\n.news__item p:first-of-type:before {\n    content: '';\n    position: absolute;\n    height: 5px;\n    background: #5ad67d;\n    width: 35px;\n    top: -0.75rem;\n    border-radius: 3px;\n}\n\n.news__item:hover .news__meta-details {\n    left: 0%;\n}\n\n@media (min-width: 640px) {\n    .news__item {\n        flex-direction: row;\n        max-width: 700px;\n    }\n\n    .news__item .news__meta {\n        flex-basis: 40%;\n        height: auto;\n    }\n\n    .news__item .news__description {\n        flex-basis: 60%;\n    }\n\n    .news__item .news__description:before {\n        -webkit-transform: skewX(-3deg);\n        transform: skewX(-3deg);\n        content: '';\n        background: #fff;\n        width: 30px;\n        position: absolute;\n        left: -10px;\n        top: 0;\n        bottom: 0;\n        z-index: -1;\n    }\n\n    .news__item.alt {\n        flex-direction: row-reverse;\n    }\n\n    .news__item.alt .news__description:before {\n        left: inherit;\n        right: -10px;\n        -webkit-transform: skew(3deg);\n        transform: skew(3deg);\n    }\n\n    .news__item.alt .news__meta-details {\n        padding-left: 25px;\n    }\n}\n"],sourceRoot:""}]);const s=A},501:(n,e,t)=>{t.d(e,{Z:()=>s});var r=t(15),o=t.n(r),i=t(645),A=t.n(i)()(o());A.push([n.id,".sources {\n    display: flex;\n    flex-wrap: nowrap;\n    width: 100%;\n    height: 120px;\n    overflow: auto;\n    align-items: center;\n    font: 300 1em 'Fira Sans', sans-serif;\n}\n\n.source__item {\n    background: none;\n    border: 2px solid #30c5ff;\n    font: inherit;\n    line-height: 1;\n    margin: 0.5em;\n    padding: 1em 2em;\n    color: #70d6ff;\n    transition: 0.25s;\n    cursor: pointer;\n}\n\n.source__item:hover,\n.source__item:focus {\n    border-color: #3fcc59;\n    color: #69db7e;\n    box-shadow: 0 0.5em 0.5em -0.4em #3fcc59;\n    transform: translateY(-0.25em);\n}\n\n.source__item-name {\n    font-weight: 400;\n    white-space: nowrap;\n}\n","",{version:3,sources:["webpack://./src/components/view/sources/sources.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,iBAAiB;IACjB,WAAW;IACX,aAAa;IACb,cAAc;IACd,mBAAmB;IACnB,qCAAqC;AACzC;;AAEA;IACI,gBAAgB;IAChB,yBAAyB;IACzB,aAAa;IACb,cAAc;IACd,aAAa;IACb,gBAAgB;IAChB,cAAc;IACd,iBAAiB;IACjB,eAAe;AACnB;;AAEA;;IAEI,qBAAqB;IACrB,cAAc;IACd,wCAAwC;IACxC,8BAA8B;AAClC;;AAEA;IACI,gBAAgB;IAChB,mBAAmB;AACvB",sourcesContent:[".sources {\n    display: flex;\n    flex-wrap: nowrap;\n    width: 100%;\n    height: 120px;\n    overflow: auto;\n    align-items: center;\n    font: 300 1em 'Fira Sans', sans-serif;\n}\n\n.source__item {\n    background: none;\n    border: 2px solid #30c5ff;\n    font: inherit;\n    line-height: 1;\n    margin: 0.5em;\n    padding: 1em 2em;\n    color: #70d6ff;\n    transition: 0.25s;\n    cursor: pointer;\n}\n\n.source__item:hover,\n.source__item:focus {\n    border-color: #3fcc59;\n    color: #69db7e;\n    box-shadow: 0 0.5em 0.5em -0.4em #3fcc59;\n    transform: translateY(-0.25em);\n}\n\n.source__item-name {\n    font-weight: 400;\n    white-space: nowrap;\n}\n"],sourceRoot:""}]);const s=A},767:(n,e,t)=>{t.d(e,{Z:()=>s});var r=t(15),o=t.n(r),i=t(645),A=t.n(i)()(o());A.push([n.id,"* {\n    box-sizing: border-box;\n}\nbody {\n    color: #fff;\n    background: #17181c;\n    font-family: sans-serif;\n    min-height: 100vh;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    margin: 0;\n    align-items: center;\n}\nbody > * {\n    max-width: 1200px;\n    width: 100%;\n}\n.burger {\n    display: none;\n}\nheader {\n    padding: 10px 30px;\n}\n\nheader h1 {\n    font-size: 40px;\n    font-weight: 800;\n}\n\nmain {\n    padding: 10px 30px;\n    flex-grow: 1;\n}\n.sources {\n    scrollbar-width: thin;\n    position: sticky;\n    top: 0;\n    z-index: 2;\n    background-color: #17181c;\n}\n.sources::-webkit-scrollbar {\n    width: 100%;\n}\n.sources::-webkit-scrollbar-track {\n    background-color: rgb(90, 195, 226);\n    border-radius: 5px;\n}\n.sources::-webkit-scrollbar-thumb {\n    background-color: #dce6de;\n    border-radius: 5px;\n}\n\nfooter {\n    height: 100px;\n    /* display: flex;\n    align-items: center;\n    justify-content: center; */\n}\nfooter .copyright {\n    font-size: 14px;\n    color: #333;\n    text-align: center;\n}\nfooter .copyright a {\n    color: #444;\n}\nfooter .copyright a:hover {\n    color: #555;\n}\nfooter .copyright:before {\n    content: '©';\n}\n\n.footer {\n    display: flex;\n    justify-content: space-evenly;\n}\nfooter a {\n    color: #30c5ff;\n    transition: .3s;\n}\nfooter a:hover {\n    color: #3fcc59;\n}\n.footer__logo {\n    width: 100px;\n    background: azure;\n}\n.footer__link {\n    display: flex;\n    height: 100%;\n}\n\n@media (max-width:760px) {\n    body {\n        align-items: flex-start;\n    }\n    body.active {\n        overflow: hidden;\n    }\n    header {\n        width: 75%;\n    }\n    .footer {\n        flex-direction: column;\n        align-items: center;\n    }\n    .footer__logo {\n        height: 50px;\n    }\n    .burger {\n        z-index: 3;\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        justify-content: center;\n        gap: 5px;\n        position: absolute;\n        width: 50px;\n        height: 50px;\n        right: 30px;\n        top: 40px;\n        background-color: #3c3f48;\n        transition: .3s;\n    }\n    .burger:hover {\n        cursor: pointer;\n        background-color: #566285;\n    }\n    .burger.active > span:nth-child(1) {\n        transform: rotate(45deg) translate(7px, 8px);\n    }\n    .burger.active > span:nth-child(2) {\n        opacity: 0;\n    }\n    .burger.active > span:nth-child(3) {\n        transform: rotate(135deg) translate(-6px, 6px);\n    }\n    .burger > span {\n        width: 40px;\n        height: 5px;\n        display: block;\n        background: lightgrey;\n        transition: .3s;\n    }\n    .sources {\n        scrollbar-width: auto;\n        position: absolute;\n        top: 0;\n        left: 0;\n        width: 0;\n        height: 100%;\n        flex-wrap: wrap;\n        justify-content: space-between;\n        transition: .3s;\n    }\n    .sources.active {\n        width: 100%;\n        padding: 100px 30px 50px;\n    }\n}","",{version:3,sources:["webpack://./src/global.css"],names:[],mappings:"AAAA;IACI,sBAAsB;AAC1B;AACA;IACI,WAAW;IACX,mBAAmB;IACnB,uBAAuB;IACvB,iBAAiB;IACjB,aAAa;IACb,sBAAsB;IACtB,8BAA8B;IAC9B,SAAS;IACT,mBAAmB;AACvB;AACA;IACI,iBAAiB;IACjB,WAAW;AACf;AACA;IACI,aAAa;AACjB;AACA;IACI,kBAAkB;AACtB;;AAEA;IACI,eAAe;IACf,gBAAgB;AACpB;;AAEA;IACI,kBAAkB;IAClB,YAAY;AAChB;AACA;IACI,qBAAqB;IACrB,gBAAgB;IAChB,MAAM;IACN,UAAU;IACV,yBAAyB;AAC7B;AACA;IACI,WAAW;AACf;AACA;IACI,mCAAmC;IACnC,kBAAkB;AACtB;AACA;IACI,yBAAyB;IACzB,kBAAkB;AACtB;;AAEA;IACI,aAAa;IACb;;8BAE0B;AAC9B;AACA;IACI,eAAe;IACf,WAAW;IACX,kBAAkB;AACtB;AACA;IACI,WAAW;AACf;AACA;IACI,WAAW;AACf;AACA;IACI,YAAY;AAChB;;AAEA;IACI,aAAa;IACb,6BAA6B;AACjC;AACA;IACI,cAAc;IACd,eAAe;AACnB;AACA;IACI,cAAc;AAClB;AACA;IACI,YAAY;IACZ,iBAAiB;AACrB;AACA;IACI,aAAa;IACb,YAAY;AAChB;;AAEA;IACI;QACI,uBAAuB;IAC3B;IACA;QACI,gBAAgB;IACpB;IACA;QACI,UAAU;IACd;IACA;QACI,sBAAsB;QACtB,mBAAmB;IACvB;IACA;QACI,YAAY;IAChB;IACA;QACI,UAAU;QACV,aAAa;QACb,sBAAsB;QACtB,mBAAmB;QACnB,uBAAuB;QACvB,QAAQ;QACR,kBAAkB;QAClB,WAAW;QACX,YAAY;QACZ,WAAW;QACX,SAAS;QACT,yBAAyB;QACzB,eAAe;IACnB;IACA;QACI,eAAe;QACf,yBAAyB;IAC7B;IACA;QACI,4CAA4C;IAChD;IACA;QACI,UAAU;IACd;IACA;QACI,8CAA8C;IAClD;IACA;QACI,WAAW;QACX,WAAW;QACX,cAAc;QACd,qBAAqB;QACrB,eAAe;IACnB;IACA;QACI,qBAAqB;QACrB,kBAAkB;QAClB,MAAM;QACN,OAAO;QACP,QAAQ;QACR,YAAY;QACZ,eAAe;QACf,8BAA8B;QAC9B,eAAe;IACnB;IACA;QACI,WAAW;QACX,wBAAwB;IAC5B;AACJ",sourcesContent:["* {\n    box-sizing: border-box;\n}\nbody {\n    color: #fff;\n    background: #17181c;\n    font-family: sans-serif;\n    min-height: 100vh;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    margin: 0;\n    align-items: center;\n}\nbody > * {\n    max-width: 1200px;\n    width: 100%;\n}\n.burger {\n    display: none;\n}\nheader {\n    padding: 10px 30px;\n}\n\nheader h1 {\n    font-size: 40px;\n    font-weight: 800;\n}\n\nmain {\n    padding: 10px 30px;\n    flex-grow: 1;\n}\n.sources {\n    scrollbar-width: thin;\n    position: sticky;\n    top: 0;\n    z-index: 2;\n    background-color: #17181c;\n}\n.sources::-webkit-scrollbar {\n    width: 100%;\n}\n.sources::-webkit-scrollbar-track {\n    background-color: rgb(90, 195, 226);\n    border-radius: 5px;\n}\n.sources::-webkit-scrollbar-thumb {\n    background-color: #dce6de;\n    border-radius: 5px;\n}\n\nfooter {\n    height: 100px;\n    /* display: flex;\n    align-items: center;\n    justify-content: center; */\n}\nfooter .copyright {\n    font-size: 14px;\n    color: #333;\n    text-align: center;\n}\nfooter .copyright a {\n    color: #444;\n}\nfooter .copyright a:hover {\n    color: #555;\n}\nfooter .copyright:before {\n    content: '©';\n}\n\n.footer {\n    display: flex;\n    justify-content: space-evenly;\n}\nfooter a {\n    color: #30c5ff;\n    transition: .3s;\n}\nfooter a:hover {\n    color: #3fcc59;\n}\n.footer__logo {\n    width: 100px;\n    background: azure;\n}\n.footer__link {\n    display: flex;\n    height: 100%;\n}\n\n@media (max-width:760px) {\n    body {\n        align-items: flex-start;\n    }\n    body.active {\n        overflow: hidden;\n    }\n    header {\n        width: 75%;\n    }\n    .footer {\n        flex-direction: column;\n        align-items: center;\n    }\n    .footer__logo {\n        height: 50px;\n    }\n    .burger {\n        z-index: 3;\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        justify-content: center;\n        gap: 5px;\n        position: absolute;\n        width: 50px;\n        height: 50px;\n        right: 30px;\n        top: 40px;\n        background-color: #3c3f48;\n        transition: .3s;\n    }\n    .burger:hover {\n        cursor: pointer;\n        background-color: #566285;\n    }\n    .burger.active > span:nth-child(1) {\n        transform: rotate(45deg) translate(7px, 8px);\n    }\n    .burger.active > span:nth-child(2) {\n        opacity: 0;\n    }\n    .burger.active > span:nth-child(3) {\n        transform: rotate(135deg) translate(-6px, 6px);\n    }\n    .burger > span {\n        width: 40px;\n        height: 5px;\n        display: block;\n        background: lightgrey;\n        transition: .3s;\n    }\n    .sources {\n        scrollbar-width: auto;\n        position: absolute;\n        top: 0;\n        left: 0;\n        width: 0;\n        height: 100%;\n        flex-wrap: wrap;\n        justify-content: space-between;\n        transition: .3s;\n    }\n    .sources.active {\n        width: 100%;\n        padding: 100px 30px 50px;\n    }\n}"],sourceRoot:""}]);const s=A},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t=n(e);return e[2]?"@media ".concat(e[2]," {").concat(t,"}"):t})).join("")},e.i=function(n,t,r){"string"==typeof n&&(n=[[null,n,""]]);var o={};if(r)for(var i=0;i<this.length;i++){var A=this[i][0];null!=A&&(o[A]=!0)}for(var s=0;s<n.length;s++){var a=[].concat(n[s]);r&&o[a[0]]||(t&&(a[2]?a[2]="".concat(t," and ").concat(a[2]):a[2]=t),e.push(a))}},e}},15:n=>{function e(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,r=new Array(e);t<e;t++)r[t]=n[t];return r}n.exports=function(n){var t,r,o=(r=4,function(n){if(Array.isArray(n))return n}(t=n)||function(n,e){var t=n&&("undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"]);if(null!=t){var r,o,i=[],A=!0,s=!1;try{for(t=t.call(n);!(A=(r=t.next()).done)&&(i.push(r.value),!e||i.length!==e);A=!0);}catch(n){s=!0,o=n}finally{try{A||null==t.return||t.return()}finally{if(s)throw o}}return i}}(t,r)||function(n,t){if(n){if("string"==typeof n)return e(n,t);var r=Object.prototype.toString.call(n).slice(8,-1);return"Object"===r&&n.constructor&&(r=n.constructor.name),"Map"===r||"Set"===r?Array.from(n):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?e(n,t):void 0}}(t,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=o[1],A=o[3];if(!A)return i;if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(A)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),c="/*# ".concat(a," */"),l=A.sources.map((function(n){return"/*# sourceURL=".concat(A.sourceRoot||"").concat(n," */")}));return[i].concat(l).concat([c]).join("\n")}return[i].join("\n")}},361:(n,e,t)=>{t.r(e),t.d(e,{default:()=>r});const r=t.p+"/img/news_placeholder.jpg"},73:(n,e,t)=>{t.r(e),t.d(e,{default:()=>r});const r=t.p+"/img/rsschool.svg"},242:(n,e,t)=>{t.r(e),t.d(e,{default:()=>A});var r=t(379),o=t.n(r),i=t(669);o()(i.Z,{insert:"head",singleton:!1});const A=i.Z.locals||{}},595:(n,e,t)=>{t.r(e),t.d(e,{default:()=>A});var r=t(379),o=t.n(r),i=t(501);o()(i.Z,{insert:"head",singleton:!1});const A=i.Z.locals||{}},427:(n,e,t)=>{t.r(e),t.d(e,{default:()=>A});var r=t(379),o=t.n(r),i=t(767);o()(i.Z,{insert:"head",singleton:!1});const A=i.Z.locals||{}},379:(n,e,t)=>{var r,o=function(){var n={};return function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}n[e]=t}return n[e]}}(),i=[];function A(n){for(var e=-1,t=0;t<i.length;t++)if(i[t].identifier===n){e=t;break}return e}function s(n,e){for(var t={},r=[],o=0;o<n.length;o++){var s=n[o],a=e.base?s[0]+e.base:s[0],c=t[a]||0,l="".concat(a," ").concat(c);t[a]=c+1;var d=A(l),u={css:s[1],media:s[2],sourceMap:s[3]};-1!==d?(i[d].references++,i[d].updater(u)):i.push({identifier:l,updater:m(u,e),references:1}),r.push(l)}return r}function a(n){var e=document.createElement("style"),r=n.attributes||{};if(void 0===r.nonce){var i=t.nc;i&&(r.nonce=i)}if(Object.keys(r).forEach((function(n){e.setAttribute(n,r[n])})),"function"==typeof n.insert)n.insert(e);else{var A=o(n.insert||"head");if(!A)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");A.appendChild(e)}return e}var c,l=(c=[],function(n,e){return c[n]=e,c.filter(Boolean).join("\n")});function d(n,e,t,r){var o=t?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(n.styleSheet)n.styleSheet.cssText=l(e,o);else{var i=document.createTextNode(o),A=n.childNodes;A[e]&&n.removeChild(A[e]),A.length?n.insertBefore(i,A[e]):n.appendChild(i)}}function u(n,e,t){var r=t.css,o=t.media,i=t.sourceMap;if(o?n.setAttribute("media",o):n.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleSheet)n.styleSheet.cssText=r;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(r))}}var p=null,f=0;function m(n,e){var t,r,o;if(e.singleton){var i=f++;t=p||(p=a(e)),r=d.bind(null,t,i,!1),o=d.bind(null,t,i,!0)}else t=a(e),r=u.bind(null,t,e),o=function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)};return r(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap)return;r(n=e)}else o()}}n.exports=function(n,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=(void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r));var t=s(n=n||[],e);return function(n){if(n=n||[],"[object Array]"===Object.prototype.toString.call(n)){for(var r=0;r<t.length;r++){var o=A(t[r]);i[o].references--}for(var a=s(n,e),c=0;c<t.length;c++){var l=A(t[c]);0===i[l].references&&(i[l].updater(),i.splice(l,1))}t=a}}}},717:function(n,e,t){var r=this&&this.__importDefault||function(n){return n&&n.__esModule?n:{default:n}};Object.defineProperty(e,"__esModule",{value:!0});const o=r(t(842)),i=t(527);e.default=class{constructor(){this.controller=new o.default,this.view=new i.AppView,this.sources=document.querySelector(".sources"),this.body=document.querySelector("body"),this.burgerBut=document.querySelector(".burger")}start(){document.querySelector(".sources").addEventListener("click",(n=>this.controller.getNews(n,(n=>{this.view.drawNews(n)})))),this.controller.getSources((n=>{this.view.drawSources(n)}))}burger(n){n.currentTarget.classList.contains("active")?this.burgerClose():this.burgerOpen()}burgerClose(){this.burgerBut.classList.remove("active"),this.sources.classList.remove("active"),this.body.classList.remove("active")}burgerOpen(){this.burgerBut.classList.add("active"),this.sources.classList.add("active"),this.body.classList.add("active")}}},853:function(n,e,t){var r=this&&this.__importDefault||function(n){return n&&n.__esModule?n:{default:n}};Object.defineProperty(e,"__esModule",{value:!0});const o=r(t(24));class i extends o.default{constructor(){super("https://newsapi.org/v2/",{apiKey:"25a1390ccf1b47988802228ee55c00c8"})}}e.default=i},842:function(n,e,t){var r=this&&this.__importDefault||function(n){return n&&n.__esModule?n:{default:n}};Object.defineProperty(e,"__esModule",{value:!0});const o=r(t(853)),i=r(t(717));class A extends o.default{getSources(n){super.getResp({endpoint:"sources"},n)}getNews(n,e){let t=n.target;const r=n.currentTarget;for((new i.default).burgerClose();t!==r;){if(t.classList.contains("source__item")){const n=t.getAttribute("data-source-id");return void(r.getAttribute("data-source")!==n&&(r.setAttribute("data-source",n),super.getResp({endpoint:"everything",options:{sources:n}},e)))}t=t.parentNode}}}e.default=A},24:(n,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(n,e){this.baseLink=n,this.options=e,this.baseLink=n,this.options=e}getResp({endpoint:n,options:e={}},t=(()=>{console.error("No callback for GET response")})){this.load("GET",n,t,e)}errorHandler(n){if(!n.ok)throw 401!==n.status&&404!==n.status||console.log(`Sorry, but there is ${n.status} error: ${n.statusText}`),Error(n.statusText);return n}makeUrl(n,e){const t=Object.assign(Object.assign({},this.options),n);let r=`${this.baseLink}${e}?`;return Object.keys(t).forEach((n=>{r+=`${n}=${t[n]}&`})),r.slice(0,-1)}load(n,e,t,r){fetch(this.makeUrl(r,e),{method:n}).then(this.errorHandler).then((n=>n.json())).then((n=>t(n))).catch((n=>console.error(n)))}}},527:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.AppView=void 0;const r=t(798),o=t(53);class i{constructor(){this.news=new r.News,this.sources=new o.Sources}drawNews(n){const e=(null==n?void 0:n.articles)?null==n?void 0:n.articles:[];this.news.draw(e)}drawSources(n){const e=(null==n?void 0:n.sources)?null==n?void 0:n.sources:[];this.sources.draw(e)}}e.AppView=i,e.default=i},798:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.News=void 0,t(242),e.News=class{draw(n){const e=n.length>=10?n.filter(((n,e)=>e<10)):n,t=document.createDocumentFragment(),r=document.querySelector("#newsItemTemp");e.forEach(((n,e)=>{var o;const i=r.content.cloneNode(!0);e%2&&(null===(o=i.querySelector(".news__item"))||void 0===o||o.classList.add("alt")),i.querySelector(".news__meta-photo").style.backgroundImage=`url(${n.urlToImage||"img/news_placeholder.jpg"})`,i.querySelector(".news__meta-author").textContent=n.author||n.source.name,i.querySelector(".news__meta-date").textContent=n.publishedAt.slice(0,10).split("-").reverse().join("-"),i.querySelector(".news__description-title").textContent=n.title,i.querySelector(".news__description-source").textContent=n.source.name,i.querySelector(".news__description-content").textContent=n.description,i.querySelector(".news__read-more a").setAttribute("href",n.url),t.append(i)})),document.querySelector(".news").innerHTML="",document.querySelector(".news").appendChild(t)}}},53:(n,e,t)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Sources=void 0,t(595),e.Sources=class{draw(n){var e;const t=document.createDocumentFragment(),r=document.querySelector("#sourceItemTemp");n.forEach((n=>{const e=null==r?void 0:r.content.cloneNode(!0);e.querySelector(".source__item-name").textContent=n.name,e.querySelector(".source__item").setAttribute("data-source-id",n.id),t.append(e)})),null===(e=document.querySelector(".sources"))||void 0===e||e.append(t)}}},607:function(n,e,t){var r=this&&this.__importDefault||function(n){return n&&n.__esModule?n:{default:n}};Object.defineProperty(e,"__esModule",{value:!0});const o=r(t(717));t(427),t(73),t(361);const i=new o.default;i.start(),document.querySelector(".burger").addEventListener("click",(n=>{i.burger(n)}))}},e={};function t(r){var o=e[r];if(void 0!==o)return o.exports;var i=e[r]={id:r,exports:{}};return n[r].call(i.exports,i,i.exports,t),i.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.r=n=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},(()=>{var n;t.g.importScripts&&(n=t.g.location+"");var e=t.g.document;if(!n&&e&&(e.currentScript&&(n=e.currentScript.src),!n)){var r=e.getElementsByTagName("script");r.length&&(n=r[r.length-1].src)}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=n})(),t(607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,